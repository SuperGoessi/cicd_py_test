name: Python CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest flake8 geopandas shapely pyproj fiona rtree

      - name: Run flake8 (non-blocking)
        run: flake8 . || true

      - name: Run pytest
        run: pytest

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    env:
      IMAGE_NAME: python-geo-app
    steps:
      - uses: actions/checkout@v4

      - name: Compute Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy_aci:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      IMAGE: ${{ secrets.ACR_LOGIN_SERVER }}/python-geo-app:latest
      PORT: "5000"                 
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}   # SP JSON

      - name: Deploy/Update ACI
        uses: azure/CLI@v2
        with:
          inlineScript: |
            set -e
            RG="${{ secrets.AZ_RG }}"
            NAME="${{ secrets.ACI_NAME }}"
            DNS="${{ secrets.ACI_DNS_LABEL }}"

            if az container show -g "$RG" -n "$NAME" &>/dev/null; then
              az container delete -g "$RG" -n "$NAME" --yes
              until ! az container show -g "$RG" -n "$NAME" &>/dev/null; do sleep 3; done
            fi

            az container create \
              --resource-group "$RG" \
              --name "$NAME" \
              --image "${IMAGE}" \
              --cpu 1 --memory 1 \
              --ports ${PORT} \
              --dns-name-label "$DNS" \
              --registry-login-server "${{ secrets.ACR_LOGIN_SERVER }}" \
              --registry-username "${{ secrets.ACR_USERNAME }}" \
              --registry-password "${{ secrets.ACR_PASSWORD }}" \
              --restart-policy Always

            FQDN=$(az container show -g "$RG" -n "$NAME" --query ipAddress.fqdn -o tsv)
            echo "FQDN=$FQDN" >> $GITHUB_OUTPUT
            echo "### Deployed to ACI" >> $GITHUB_STEP_SUMMARY
            echo "- FQDN: \`$FQDN\`" >> $GITHUB_STEP_SUMMARY
            echo "- Port: ${PORT}" >> $GITHUB_STEP_SUMMARY
